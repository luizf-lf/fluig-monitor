// Prisma schema docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/main/generated/client"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "./ERD.svg"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Environment {
  id               Int                       @id @default(autoincrement())
  name             String
  release          String
  baseUrl          String
  kind             String
  oAuthKeysId      EnvironmentAuthKeys?
  updateScheduleId UpdateSchedule?
  httpResponses    HTTPResponse[]
  licenceHistory   LicenceHistory[]
  monitorHistory   MonitorHistory[]
  statisticHistory StatisticsHistory[]
  logCreatedAt     DateTime                  @default(now())
  logUpdateAt      DateTime                  @default(now())
  logDeleted       Boolean                   @default(false)
  logDeletedAt     DateTime                  @default(now())
  isFavorite       Boolean                   @default(false)
  favoritedAt      DateTime                  @default(now())
}

model EnvironmentAuthKeys {
  id            Int         @id @default(autoincrement())
  payload       String
  hash          String
  environmentId Int         @unique
  environment   Environment @relation(fields: [environmentId], references: [id])
}

model UpdateSchedule {
  id             Int          @id @default(autoincrement())
  frequency      String
  from           String
  to             String
  onlyOnWorkDays Boolean      @default(false)
  environmentId  Int          @unique
  environment    Environment? @relation(fields: [environmentId], references: [id])
}

model HTTPResponse {
  id               Int                @id @default(autoincrement())
  environmentId    Int                @unique
  environment      Environment        @relation(fields: [environmentId], references: [id])
  timestamp        DateTime           @default(now())
  statusCode       Int
  responseTimeMs   Int
  licenseHistory   LicenceHistory?
  monitorHistory   MonitorHistory?
  statisticHistory StatisticsHistory?
}

model LicenceHistory {
  id                Int                     @id @default(autoincrement())
  environmentId     Int
  environment       Environment             @relation(fields: [environmentId], references: [id])
  httpResponseId    Int                     @unique
  httpResponse      HTTPResponse @relation(fields: [httpResponseId], references: [id])
  tenantId          Int
  activeUsers       Int
  totalLicenses     Int
  remainingLicenses Int
}

model MonitorHistory {
  id             Int                     @id @default(autoincrement())
  environmentId  Int
  environment    Environment             @relation(fields: [environmentId], references: [id])
  httpResponseId Int                     @unique
  httpResponse   HTTPResponse @relation(fields: [httpResponseId], references: [id])
  analytics      String?
  licenseServer  String?
  mailServer     String?
  solrServer     String?
  viewer         String?
  openOffice     String?
  realTime       String?
  MSOffice       String?
}

model StatisticsHistory {
  id             Int                     @id @default(autoincrement())
  environmentId  Int
  environment    Environment             @relation(fields: [environmentId], references: [id])
  httpResponseId Int                     @unique
  httpResponse   HTTPResponse @relation(fields: [httpResponseId], references: [id])

  // TODO: Finish model map
  fullResponse  String?

  // dataSourceFluigDs String?
  // dataSourceFluigDsRo String?
  // databaseInfo String?
}

model AppSetting {
  id        Int     @id @default(autoincrement())
  settingId String  @unique
  value     String
  group     String?
}

model Notification {
  id        Int      @id @default(autoincrement())
  type      String
  title     String?
  body      String
  createdAt DateTime @default(now())
  readed    Boolean  @default(false)
}

model Log {
  id        Int      @id @default(autoincrement())
  timestamp DateTime @default(now())
  type      String
  message   String
}
